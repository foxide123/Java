package Thermometer;

import Heater.Heater;

public class Thermometer implements Runnable
{
   Heater heater;

  private static final int HOT = 15;
  private static final int COLD = -10;

   public Thermometer(Heater heater)
   {
     this.heater = heater;
   }

  public double temperature(double t, int p, int d, double t0, int s) {
    double tMax = Math.min(11 * p + 10, 11 * p + 10 + t0);
    tMax = Math.max(Math.max(t, tMax), t0);
    double heaterTerm = 0;
    if (p > 0) {
      double den = Math.max((tMax * (20 - 5 * p) * (d + 5)), 0.1);
      heaterTerm = 30 * s * Math.abs(tMax - t) / den;
    }
    double outdoorTerm = (t - t0) * s / 250.0;
    t = Math.min(Math.max(t - outdoorTerm + heaterTerm, t0), tMax);
    return t;
  }

  public String temperatureWarning(String t)
  {
     switch(t){
       case "HOT":
         System.out.println("Warning (thermometer1), temperature too Hot. TURN HEATER DOWN");
       case "COLD":
         System.out.println("Warning (thermometer1), temperature too Cold. TURN HEATER UP");
     }
     return null;
  }

  public void run()
  {
      double t=0;
      for(;;){
        // sleep for 1 sec so that we see changes in temperature
        try
        {
          Thread.sleep(1000);
        }
        catch (InterruptedException e)
        {
          e.printStackTrace();
        }
         int x = 4+ (int)(Math.random()*((8-4)+1));
         t = this.temperature(t, heater.getPower(), 1,-5,x);
        System.out.println("thermometer 1:" + t);
        if(t>=HOT){
          this.temperatureWarning("HOT");
          //additional sleep for 5 sec so that temperature rise/sink slower
          try
          {
            Thread.sleep(5000);
          }
          catch (InterruptedException e)
          {
            e.printStackTrace();
          }
        }else if(t<=COLD){
          this.temperatureWarning("COLD");
          try
          {
            Thread.sleep(5000);
          }
          catch (InterruptedException e)
          {
            e.printStackTrace();
          }
        }
      }

  }
}
